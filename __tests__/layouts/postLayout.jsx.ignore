import { render, screen } from '@testing-library/react'
import PostLayout from '@/layouts/PostLayout'
//import { CoreContent } from 'pliny/utils/contentlayer'
import '@testing-library/jest-dom'
import siteMetadata from '@/data/siteMetadata'

const mockContent = {
  filePath: 'path/to/post',
  path: '/blog/sample-post',
  slug: 'sample-post',
  date: '2025-04-01T00:00:00.000Z',
  title: 'Sample Blog Post',
  tags: ['Tag1', 'Tag2'],
}

const mockAuthorDetails = [
  {
    name: 'Author Name',
    bio: 'Author Bio',
  },
]

describe('PostLayout', () => {
  it('Renders the blog post content correctly', () => {
    render(
      <PostLayout
        content={mockContent}
        authorDetails={mockAuthorDetails}
        next={{ path: '/blog/next-post', title: 'Next Post' }}
        prev={{ path: '/blog/prev-post', title: 'Previous Post' }}
      >
        <div>Child content</div>
      </PostLayout>
    )

    // Check if the title is rendered
    expect(screen.getByText('Sample Blog Post')).toBeInTheDocument()

    // Check if the date is rendered in the correct format
    const formattedDate = new Date(mockContent.date).toLocaleDateString(siteMetadata.locale, {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    })
    expect(screen.getByText(formattedDate)).toBeInTheDocument()

    // Check if the "Discuss on X" link is rendered
    expect(screen.getByText('Discuss on X (Twitter)')).toBeInTheDocument()
    expect(screen.getByText('Discuss on X (Twitter)').closest('a')).toHaveAttribute(
      'href',
      `https://mobile.twitter.com/search?q=${encodeURIComponent(
        `${siteMetadata.siteUrl}/blog/sample-post`
      )}`
    )

    // Check if the tags are rendered correctly
    expect(screen.getByText('Tag1')).toBeInTheDocument()
    expect(screen.getByText('Tag2')).toBeInTheDocument()

    // Check if the "Visit website" link is rendered (from Ad component)
    expect(screen.getAllByText('Discuss on X (Twitter)').length).toBe(2)

    // Check if the "Child content" is rendered
    expect(screen.getByText('Child content')).toBeInTheDocument()

    // Check if the ad slots are rendered
    const adSlots = screen.getAllByRole('ad')
    expect(adSlots).toHaveLength(2) // Check for two ad slots
  })

  it('Does not render comments if siteMetadata.comments is false', () => {
    // Override the siteMetadata for this test
    const originalSiteMetadata = siteMetadata
    siteMetadata.comments = false

    render(
      <PostLayout
        content={mockContent}
        authorDetails={mockAuthorDetails}
        next={{ path: '/blog/next-post', title: 'Next Post' }}
        prev={{ path: '/blog/prev-post', title: 'Previous Post' }}
      >
        <div>Child content</div>
      </PostLayout>
    )

    // Check that the comments section is not rendered
    expect(screen.queryByText('Discuss on X (Twitter)')).not.toBeInTheDocument()

    // Restore the original siteMetadata after the test
    siteMetadata.comments = originalSiteMetadata.comments
  })

  it('Renders the sidebar tags correctly', () => {
    render(
      <PostLayout
        content={mockContent}
        authorDetails={mockAuthorDetails}
        next={{ path: '/blog/next-post', title: 'Next Post' }}
        prev={{ path: '/blog/prev-post', title: 'Previous Post' }}
      >
        <div>Child content</div>
      </PostLayout>
    )

    // Check if the sidebar contains the correct tags
    expect(screen.getByText('Tag1')).toBeInTheDocument()
    expect(screen.getByText('Tag2')).toBeInTheDocument()
  })

  it('Checks elements have the correct ARIA attributes', () => {
    const { container } = render(
      <PostLayout
        content={mockContent}
        authorDetails={mockAuthorDetails}
        next={{ path: '/blog/next-post', title: 'Next Post' }}
        prev={{ path: '/blog/prev-post', title: 'Previous Post' }}
      >
        <div>Child content</div>
      </PostLayout>
    )

    // Check `.site-container`
    const siteContainer = container.querySelector(".site-container");
    expect(siteContainer).toBeInTheDocument();
    expect(siteContainer).toHaveAttribute("role", "generic");
    expect(siteContainer).toHaveAttribute("aria-label", "Page Content Section");

    // Check `.site-aside`
    const article = container.querySelector(".site-aside");
    expect(article).toBeInTheDocument();
    expect(article).toHaveAttribute("role", "complementary");
    expect(article).toHaveAttribute("aria-label", "Post Tags Sidebar");

    // Check `.component-posts-sidebar__title.component-title`
    const article = container.querySelector(".component-posts-sidebar__title.component-title");
    expect(article).toBeInTheDocument();
    expect(article).toHaveAttribute("role", "heading");
    expect(article).toHaveAttribute("aria-label", "All Posts Heading");

    // Check `.component-posts-article`
    const article = container.querySelector(".component-posts-article");
    expect(article).toBeInTheDocument();
    expect(article).toHaveAttribute("role", "article");
    expect(article).toHaveAttribute("aria-label", "Blog Post Article");

    // Check `.component-posts-article__title`
    const articleTitle = container.querySelector(".component-posts-article__title");
    expect(articleTitle).toBeInTheDocument();
    expect(articleTitle).toHaveAttribute("role", "heading");
    expect(articleTitle).toHaveAttribute("aria-label", "Blog Post Title");
  })
})
